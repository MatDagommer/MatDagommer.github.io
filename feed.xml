<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://matdagommer.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://matdagommer.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-28T01:55:13+00:00</updated><id>https://matdagommer.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Gaussian Processes</title><link href="https://matdagommer.github.io/blog/2024/gaussian-processes/" rel="alternate" type="text/html" title="Gaussian Processes"/><published>2024-05-24T22:24:00+00:00</published><updated>2024-05-24T22:24:00+00:00</updated><id>https://matdagommer.github.io/blog/2024/gaussian-processes</id><content type="html" xml:base="https://matdagommer.github.io/blog/2024/gaussian-processes/"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/gaussian-processes-480.webp 480w,/assets/img/gaussian-processes-800.webp 800w,/assets/img/gaussian-processes-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/gaussian-processes.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="introduction">Introduction</h3> <p>My recent reflection on uncertainty quantification in machine learning led me to take a closer look at Gaussian Processes. Turns out that Gaussian processes inherently allow us to compute some kind of uncertainty!</p> <h3 id="bayesian-perspective-on-weight-derivation">Bayesian Perspective on Weight Derivation</h3> <p>What most machine learning models do is come up with a set of weights or a model we can use to do inference. Usually, the way these weights are derived is by looking at the Maximum A Posteriori (MAP), which means they maximize the posterior distribution. If you look at the Bayesian interpretation of ordinary least squares or ridge regression, it turns out that coming up with those weights consists in finding the weights that maximize the posterior distribution of the weights.</p> \[\hat{\theta} = \arg\max_\theta P(\theta | X, Y) = \arg\max_\theta P(Y | X, \theta) P(\theta)\] <h3 id="posterior-predictive-distribution">Posterior Predictive Distribution</h3> <p>But the problem with this approach is that you only consider a single set of weights for your predictions. And in the process, you ruled out completely other possible models, although they may be as valid! Gaussian processes allow us to take into account all model configurations by directly modeling the posterior predictive distribution. Indeed, if we look at it from the Bayesian perspective, we see that the posterior predictive distribution integrates over all possible sets of model weights:</p> \[P(Y^* | X^*, X, Y) = \int_{\theta} P(Y^* | X^*, \theta) P(\theta | X, Y) d\theta\] <h3 id="assumption-of-gaussian-distributions">Assumption of Gaussian Distributions</h3> <p>The idea behind Gaussian processes is to assume that the posterior predictive distribution is a multivariate Gaussian. This <a href="https://www.youtube.com/watch?v=R-NUdqxKjos">video</a> explains nicely why this assumption is reasonable. Here is the short version: if your prior and your likelihood distributions are assumed to be Gaussian, then the posterior distribution becomes Gaussian immediately (because Gaussian distributions are conjugate prior of… Gaussian distributions).</p> \[P(Y | X) \sim \mathcal{N}(\mu, \Sigma)\] <h3 id="covariance-matrix-and-kernel-trick">Covariance Matrix and Kernel Trick</h3> <p>The Gaussian distribution assumption is reasonable and we’ll go on with it. Now here’s the trick: not only do we assume that the training set follows a Gaussian distribution, we also assume that the combination of the training points and the test points also follow a multivariate Gaussian distribution:</p> \[\begin{bmatrix} Y \\ Y^* \end{bmatrix} \sim \mathcal{N} \left( \begin{bmatrix} \mu \\ \mu^* \end{bmatrix}, \Sigma \right)\] <p>What should our Gaussian distribution parameters (mean values and covariance matrix) be? It turns out we don’t really care about the mean values. The simple, practical explanation is that we can center the data around zero as a preprocessing step. Regarding the covariance matrix, we can use a cool trick: a kernel! Essentially, a kernel enables us to define a surrogate for the covariance matrix which is more a “similarity matrix” than it is a covariance matrix.</p> \[\Sigma = \begin{bmatrix} K_{X, X} &amp; K_{X, X^*} \\ K_{X, X^*}^T &amp; K_{X^*, X^*} \end{bmatrix}\] <p>where \(K_{X, X}\) is the train covariance matrix, \(K_{X, X^*}\) is the train-test covariance matrix and \(K_{X^*, X^*}\) the test covariance matrix.</p> <p>The RBF kernel is commonly used and is a way to capture the similarity between two data points:</p> \[k(x, x') = \sigma_f^2\exp\left(-\frac{\|x - x'\|^2}{2l}\right)\] <p>Note that this expression can be generalized when the input space has several dimensions: \(k(x, x') = \sigma_f^2\exp\left(-\frac1{2l}(\textbf{x} - \textbf{x'})^T(\textbf{x} - \textbf{x'})\right)\)</p> <p>“But why the heck are we customizing the covariance matrix?”</p> <p>Well, there is no way we can come up with a meaningful covariance matrix given our current dataset. What would it even mean to compute a variance between \(y_1\) and \(y_n\)? They’re single observations! However, we can use a kernel function to compute the similarity between the corresponding input values. And in return, these can lead to a surrogate to the covariance matrix in the joint distribution that captures this simple idea: if two input values \(x\) and \(x'\) are similar, then the associated output values \(y\) and \(y'\) should be similar too! The best way to grasp this is to take a look at a slice from a 2D-Gaussian distribution where the two components are correlated. If one moves, the other moves too, hence the high “covariance”.</p> <p>By choosing an appropriate kernel function that correctly captures the similarity between input values, we should retrieve a nice joint distribution. Now, we need to derive the conditional distribution of the test point we want to infer. Here’s the formula, I’m sparing myself the math:</p> \[P(Y^* | X^*, X, Y) \sim \mathcal{N}(K_{X^*, X} K_{X, X}^{-1} Y, K_{X^*, X^*} - K_{X^*, X} K_{X, X}^{-1} K_{X, X^*})\] <h3 id="some-intuition">Some intuition</h3> <p>What’s important to understand at this point is that candidate “functions” that model our data can be sampled from the joint distribution. I used quote marks here because we don’t retrieve a function per se, but rather a set of what the true values could look like for the different \(x\) values. If I have 20 points in my training set, I am basically sampling one vector from a 20-dimnensional Gaussian distribution. This is well explained in this short <a href="https://arxiv.org/pdf/2009.10862">paper</a>.</p> <p>In addition, the joint distribution and its kernel constitute a prior (“kernelized prior function”), and the conditional distribution is the posterior distribution we obtain by acknowledging the training data (\(Y\) vector).</p> <h3 id="hyperparameter-optimization">Hyperparameter Optimization</h3> <p>The kernel function we introduced has two parameters \(\sigma_f\) and \(l\), respectively the vertical and horizontal scale. I’ll designated them under the term \(\beta\). They can be optimized by maximizing the log marginal likelihood \(\log P(Y \| X, \beta)\) (it’s almost the same multivariate distribution we used earlier, but without the test points):</p> \[\beta^* = \arg\max_\beta \log P(Y|X,\beta) = \arg\max_\beta -\frac1{2}Y^TK^{-1}Y - \frac{n}{2}\log2\pi -\frac1{2}\log|K|\] <h3 id="conclusion">Conclusion</h3> <p>This is only the beginning of my exploration with Gaussian processes, and I’m eager to learn more about the applications. My understanding is that Gaussian processes are well suited for small datasets but scale badly with big datasets, especially because matrix inversion has a computation time complexity of \(O(n^3)\). However, I am really hyped about the uncertainty measure we can get out of it.</p> <p><strong>Sources</strong></p> <p>https://www.cs.cornell.edu/courses/cs4780/2018fa/lectures/lecturenote15.html</p> <p>https://scikit-learn.org/stable/modules/gaussian_process.html</p> <p>https://en.wikipedia.org/wiki/Gaussian_process</p> <p>https://www.youtube.com/watch?v=UBDgSHPxVME</p> <p>https://arxiv.org/pdf/2009.10862</p>]]></content><author><name></name></author><category term="ML"/><category term="Bayesian"/><category term="Statistics,"/><category term="ML,"/><category term="Uncertainty"/><category term="Quantification"/><summary type="html"><![CDATA[A quick look at Gaussian Processes.]]></summary></entry><entry><title type="html">Decision trees in 5 minutes</title><link href="https://matdagommer.github.io/blog/2024/decision-trees/" rel="alternate" type="text/html" title="Decision trees in 5 minutes"/><published>2024-04-25T15:09:00+00:00</published><updated>2024-04-25T15:09:00+00:00</updated><id>https://matdagommer.github.io/blog/2024/decision-trees</id><content type="html" xml:base="https://matdagommer.github.io/blog/2024/decision-trees/"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>After 2 years of doing projects in the machine learning space, I realized I didn’t know how decision tree models actually worked. I never felt the urge of learning the inner working for several reasons:</p> <ul> <li>My early ML classes focused on differentiable models (Andrew Ng).</li> <li>Implementation of decision trees with the Python scikit-learn, is very easy and high-level.</li> <li>Although I trained decision trees as benchmarks, I never thought of them as a go-to models.</li> </ul> <p>Well, I (finally) decided to take a good look! In this short post, I try to describe the training process of a decision tree in an accessible language, as a reference for myself and for folks looking for a concise, yet technical explanation.</p> <p><strong>I. The tree structure</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/decision_tree-480.webp 480w,/assets/img/decision_tree-800.webp 800w,/assets/img/decision_tree-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/decision_tree.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>I’m sure you’ve encountered tree structures before, and they’re fairly easy to make sense of when presented in that format: take your input, and depending on its features (alcohol content, sulfur dioxide content), follow the path. Boom. Your output (in this case, your wine quality) is predicted to be a 6 (good) or a 5 (less good). Straightforward.</p> <p>But this tree is just one tree among a myriad of possibilities, and I could come up with an infinity of combinations: why not sort wines based on their density instead of their alcohol content at the root node? Why not change the threshold to 2.120 instead of 10.525? What decided that structure? Let’s break it down:</p> <p>At every node (nodes represent stages at which data gets sorted) of the tree, we want to separate the training data into different groups in a fashion that allows us to retrieve more homogeneous subsets (in terms of their target variable) at every step. In the case of classification (resp. regression), this means that training points with similar labels (resp., target values) tend to get sorted in the same subset.</p> <p>In order to determine what feature will be used to separate the data, and what threshold will be used, the algorithm loops through all possible (feature, threshold) combinations, computes a criterion metric (information gain, Gini impurity, variance reduction) every time and picks the combination that optimizes that metric. This criterion metrics assess how much the separation homogenized the new subsets with respect to the initial one.</p> <p>Let’s take the information gain as an example:</p> <p>Without diving into too much details, the information gain is a metric used in classification problems, which works well with the wine quality dataset (wines are classified into 6 quality categories: 3, 4, 5, 6, 7, and 8). If you’re a bit familiar with Shannon’s entropy (\(H = - \sum_{i} p_i \log_{2}(p_i)\)), it’s fairly easy to understand:</p> \[IG = H_X - H_{X_1} - H_{X_2}\] <p>where \(X\), \(X_1\) and \(X_2\) represent the initial dataset, first and second subsets. We gain information when the entropies of subsets 1 and 2 are lower than the entropy of the dataset before separation. In other words, the distribution of points in these subsets tends to be more concentrated around one class compared to the previous dataset’s distribution.</p> <p>So with information gain, we have a quantitative ways of assessing what (feature, threshold) combination returns the most informative separation at each node. I leave you with this intuition, but I encourage you to check the math behind the other metrics as well!</p> <p>If you keep doing that process at every node, you’ll end up with a beautiful tree structure. Now, there are hyperparameters you can adjust to restrict the arborescence of the tree and avoid overfitting. Setting a maximum depth, and setting a minimum information gain are ways to go.</p> <p><strong>II. Inference</strong></p> <p>Inference consist in running your sample from the root node to until it reaches terminal node. For classification, we typically classify the sample in the class that is the most represented in the corresponding training subset. If the majority of training points are from class 6, the test point gets attributed the class 6. For regression, we would take the average of training points’ target value as the predicted value.</p> <p>In the wine quality dataset, features are continuous (alcohol content, total sulfur dioxide content…). But we could have features that are categorical (e.g., color). In that case, we would loop through every (feature, feature category) combinations.</p> <p>This is the code I used to generate the figure:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span>
<span class="kn">from</span> <span class="n">sklearn</span> <span class="kn">import</span> <span class="n">tree</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># Load the dataset
</span><span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv</span><span class="sh">"</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="sh">'</span><span class="s">;</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Separate features and target variable
</span><span class="n">X</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="sh">'</span><span class="s">quality</span><span class="sh">'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">quality</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># Split the dataset into training and test sets
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

<span class="c1"># Train a decision tree classifier
</span><span class="n">clf</span> <span class="o">=</span> <span class="nc">DecisionTreeClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">max_leaf_nodes</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="c1"># Plot the decision tree
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">tree</span><span class="p">.</span><span class="nf">plot_tree</span><span class="p">(</span><span class="n">clf</span><span class="p">,</span> <span class="n">filled</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">feature_names</span><span class="o">=</span><span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span> <span class="n">class_names</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">4</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">5</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">6</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">7</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">8</span><span class="sh">'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><strong>Sources:</strong></p> <p>https://en.wikipedia.org/wiki/Decision_tree_learning</p> <p>https://towardsdatascience.com/decision-trees-explained-3ec41632ceb6</p>]]></content><author><name></name></author><category term="ML"/><category term="Decision"/><category term="Tree,"/><category term="ML,"/><category term="Random"/><category term="Forest,"/><category term="XGBoost"/><summary type="html"><![CDATA[Learn how Decision Trees are trained.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://matdagommer.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://matdagommer.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://matdagommer.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>